ORG 0000H
LJMP START

ORG 001BH
LJMP ISR_OUT
ORG 0030H
START:
mov 80H, #11000000B          ; Codes for digits stored from 80H
mov 81H, #11111001B
mov 82H, #10100100B
mov 83H, #10110000B
mov 84H, #10011001B
mov 85H, #10010010B
mov 86H, #10000010B
mov 88H, #11111000B
mov 88H, #10000000B
mov 89H, #10010000B 
MOV R0,#0
MOV R1,#0
MOV R2,#0

MOV 50H,#80H
MOV 51H,#80H
MOV 52H,#80H
MOV 53H,#80H

MOV 60H,#80H
MOV 61H,#80H
MOV 62H,#80H
MOV 63H,#80H

MOV TMOD,#10H ;Timer 1, mode 1
MOV TL1,#018H ;TL1=18 low byte of -1000
MOV TH1,#0FFH ;TH1=FC high byte of -1000
MOV IE,#88H ;10001000 enable Timer 1 int
SETB TR1

DISPLAY:
JNB P2.0, D_STOPW
JB P2.0, D_CLOCK

D_CLOCK:
CLR P3.3
CLR P3.4
MOV R0,50H
MOV P1,@R0
ACALL DELAY

SETB P3.3
MOV R0,51H
MOV P1,@R0
ACALL DELAY

SETB P3.4
CLR P3.3
MOV R0,52H
MOV P1,@R0
ACALL DELAY

SETB P3.3
MOV R0,53H
MOV P1,@R0
ACALL DELAY

JMP DISPLAY

D_STOPW:
CLR P3.3
CLR P3.4
MOV R0,60H
MOV P1,@R0
ACALL DELAY

SETB P3.3
MOV R0,61H
MOV P1,@R0
ACALL DELAY

SETB P3.4
CLR P3.3
MOV R0,63H
MOV P1,@R0
ACALL DELAY

SETB P3.3
MOV R0,63H
MOV P1,@R0
ACALL DELAY

JMP DISPLAY


DELAY:
MOV R3,#10
HERE: DJNZ R3, HERE
MOV P1,#255
RET

ISR_OUT:
CLR TR1
MOV TL1,#018H ;TL1=18 low byte of -1000
MOV TH1,#0FFH ;TH1=FC high byte of -1000
SETB TR1
ACALL UPDATE_CLK
ACALL UPDATE_STP
RETI

UPDATE_CLK:
INC 50H
MOV A,50H
CJNE A,#8AH,NEXT
MOV 50H,#80H

INC 51H
MOV A,51H
CJNE A,#86H,NEXT
MOV 51H,#80H

INC 52H
MOV A,52H
CJNE A,#8AH,NEXT
MOV 52H,#80H

INC 53H
MOV A,53H
CJNE A,#86H,NEXT
MOV 53H,#80H

NEXT:RET

UPDATE_STP:
JB P2.0,STOP
JB P2.1,STOP
INC 60H
MOV A,60H
CJNE A,#8AH,NEXT
MOV 60H,#80H

INC 61H
MOV A,61H
CJNE A,#86H,NEXT
MOV 61H,#80H

INC 62H
MOV A,62H
CJNE A,#8AH,NEXT
MOV 62H,#80H

INC 63H
MOV A,63H
CJNE A,#86H,NEXT
MOV 63H,#80H
SJMP EXIT
STOP: ACALL RESET
EXIT: RET

RESET:
MOV 60H,#80H
MOV 61H,#80H
MOV 62H,#80H
MOV 63H,#80H
RET